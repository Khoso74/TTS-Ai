<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professional AI Text-to-Speech Studio</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary-color: #6366f1;
            --primary-dark: #4f46e5;
            --secondary-color: #8b5cf6;
            --accent-color: #06b6d4;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --error-color: #ef4444;
            --text-primary: #1f2937;
            --text-secondary: #6b7280;
            --text-light: #9ca3af;
            --bg-primary: #ffffff;
            --bg-secondary: #f9fafb;
            --bg-tertiary: #f3f4f6;
            --border-color: #e5e7eb;
            --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
            --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
            --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            min-height: 100vh;
            color: var(--text-primary);
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            color: white;
        }

        .header h1 {
            font-size: 3.5rem;
            font-weight: 800;
            margin-bottom: 15px;
            text-shadow: 0 4px 8px rgba(0,0,0,0.3);
            background: linear-gradient(45deg, #fff, #f0f0f0);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header p {
            font-size: 1.3rem;
            opacity: 0.95;
            font-weight: 400;
            max-width: 600px;
            margin: 0 auto;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 40px;
        }

        .card {
            background: var(--bg-primary);
            border-radius: 24px;
            padding: 40px;
            box-shadow: var(--shadow-xl);
            border: 1px solid rgba(255,255,255,0.2);
            backdrop-filter: blur(20px);
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        }

        .card h2 {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 25px;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .card h2 i {
            color: var(--primary-color);
            font-size: 1.6rem;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-group label {
            display: block;
            margin-bottom: 10px;
            font-weight: 600;
            color: var(--text-primary);
            font-size: 0.95rem;
        }

        .form-control {
            width: 100%;
            padding: 16px 20px;
            border: 2px solid var(--border-color);
            border-radius: 16px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: var(--bg-secondary);
            font-family: inherit;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            background: var(--bg-primary);
            box-shadow: 0 0 0 4px rgba(99, 102, 241, 0.1);
        }

        textarea.form-control {
            min-height: 180px;
            resize: vertical;
            line-height: 1.6;
        }

        .controls-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .btn {
            padding: 16px 32px;
            border: none;
            border-radius: 16px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            text-decoration: none;
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 20px 25px -5px rgba(99, 102, 241, 0.4);
        }

        .btn-secondary {
            background: var(--bg-secondary);
            color: var(--text-primary);
            border: 2px solid var(--border-color);
        }

        .btn-secondary:hover {
            background: var(--bg-tertiary);
            border-color: var(--text-light);
            transform: translateY(-2px);
        }

        .btn-success {
            background: linear-gradient(135deg, var(--success-color) 0%, #059669 100%);
            color: white;
        }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 20px 25px -5px rgba(16, 185, 129, 0.4);
        }

        .btn-warning {
            background: linear-gradient(135deg, var(--warning-color) 0%, #d97706 100%);
            color: white;
        }

        .btn-warning:hover {
            transform: translateY(-2px);
            box-shadow: 0 20px 25px -5px rgba(245, 158, 11, 0.4);
        }

        .btn-danger {
            background: linear-gradient(135deg, var(--error-color) 0%, #dc2626 100%);
            color: white;
        }

        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 20px 25px -5px rgba(239, 68, 68, 0.4);
        }

        .status {
            text-align: center;
            padding: 16px;
            border-radius: 12px;
            margin: 15px 0;
            font-weight: 600;
            border: 1px solid;
        }

        .status.success {
            background: #dcfce7;
            color: #166534;
            border-color: #bbf7d0;
        }

        .status.error {
            background: #fef2f2;
            color: #991b1b;
            border-color: #fecaca;
        }

        .status.info {
            background: #dbeafe;
            color: #1e40af;
            border-color: #bfdbfe;
        }

        .status.warning {
            background: #fef3c7;
            color: #92400e;
            border-color: #fde68a;
        }

        .controls-panel {
            background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
            border-radius: 20px;
            padding: 30px;
            margin-top: 25px;
            border: 1px solid var(--border-color);
        }

        .control-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 15px;
            background: var(--bg-primary);
            border-radius: 12px;
            border: 1px solid var(--border-color);
        }

        .control-item:last-child {
            margin-bottom: 0;
        }

        .control-label {
            font-weight: 600;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .control-value {
            font-weight: 700;
            color: var(--primary-color);
            background: rgba(99, 102, 241, 0.1);
            padding: 6px 12px;
            border-radius: 8px;
        }

        .analysis-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
            gap: 20px;
            margin-top: 25px;
        }

        .analysis-item {
            background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
            padding: 20px;
            border-radius: 16px;
            text-align: center;
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
        }

        .analysis-item:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow-md);
        }

        .analysis-item h4 {
            font-size: 0.9rem;
            color: var(--text-secondary);
            margin-bottom: 8px;
            font-weight: 500;
        }

        .analysis-item p {
            font-size: 1.4rem;
            font-weight: 700;
            color: var(--primary-color);
        }

        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 25px;
            margin-top: 40px;
        }

        .feature-card {
            background: rgba(255,255,255,0.15);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 30px;
            text-align: center;
            color: white;
            border: 1px solid rgba(255,255,255,0.2);
            transition: all 0.3s ease;
        }

        .feature-card:hover {
            transform: translateY(-5px);
            background: rgba(255,255,255,0.2);
        }

        .feature-card i {
            font-size: 2.5rem;
            margin-bottom: 15px;
            color: #fff;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }

        .feature-card h3 {
            font-size: 1.3rem;
            margin-bottom: 12px;
            font-weight: 600;
        }

        .feature-card p {
            opacity: 0.9;
            font-size: 1rem;
            line-height: 1.6;
        }

        .audio-controls {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 15px;
            margin-top: 25px;
        }

        .slider-container {
            margin-bottom: 20px;
        }

        .slider-container label {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .slider-container input[type="range"] {
            width: 100%;
            height: 8px;
            border-radius: 4px;
            background: var(--bg-tertiary);
            outline: none;
            -webkit-appearance: none;
        }

        .slider-container input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
            box-shadow: var(--shadow-md);
        }

        .slider-container input[type="range"]::-moz-range-thumb {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
            border: none;
            box-shadow: var(--shadow-md);
        }

        .download-section {
            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
            border: 2px solid #0ea5e9;
            border-radius: 16px;
            padding: 25px;
            margin-top: 25px;
            text-align: center;
        }

        .download-section h3 {
            color: #0c4a6e;
            margin-bottom: 15px;
            font-weight: 600;
        }

        .download-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .note {
            background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
            border: 2px solid #f59e0b;
            color: #92400e;
            padding: 20px;
            border-radius: 16px;
            margin-bottom: 30px;
        }

        .note h3 {
            margin-bottom: 12px;
            color: #92400e;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .note ul {
            margin-left: 20px;
        }

        .note li {
            margin-bottom: 6px;
        }

        .emotion-tone-section {
            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
            border: 2px solid #0ea5e9;
            border-radius: 16px;
            padding: 20px;
            margin: 20px 0;
        }

        .emotion-tone-section h4 {
            color: #0c4a6e;
            margin-bottom: 15px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .emotion-preview {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
            padding: 10px;
            background: rgba(255, 255, 255, 0.5);
            border-radius: 8px;
            border: 1px solid rgba(14, 165, 233, 0.2);
        }

        .emotion-icon {
            font-size: 1.2rem;
            width: 24px;
            text-align: center;
        }

        .emotion-description {
            font-size: 0.9rem;
            color: #0c4a6e;
            font-style: italic;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: var(--bg-tertiary);
            border-radius: 4px;
            overflow: hidden;
            margin: 15px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            width: 0%;
            transition: width 0.3s ease;
            border-radius: 4px;
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .controls-row {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2.5rem;
            }

            .card {
                padding: 25px;
            }

            .audio-controls {
                grid-template-columns: 1fr;
            }

            .download-buttons {
                flex-direction: column;
            }
        }

        .loading {
            display: none;
            text-align: center;
            padding: 30px;
        }

        .spinner {
            border: 4px solid var(--bg-tertiary);
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .voice-preview {
            background: var(--bg-secondary);
            border-radius: 12px;
            padding: 15px;
            margin-top: 15px;
            border: 1px solid var(--border-color);
        }

        .voice-preview h4 {
            margin-bottom: 10px;
            color: var(--text-primary);
            font-weight: 600;
        }

        .voice-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.9rem;
            color: var(--text-secondary);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-microphone-alt"></i> AI Text-to-Speech Studio</h1>
            <p>Professional-grade text-to-speech conversion with advanced AI analysis and high-quality audio output</p>
        </div>

        <div class="note">
            <h3><i class="fas fa-info-circle"></i> Professional Studio Edition</h3>
            <p>This advanced version includes professional features and enhanced audio quality.</p>
            <ul>
                <li>High-quality speech synthesis with multiple voices</li>
                <li>Advanced text analysis and AI insights</li>
                <li>Professional audio controls and export options</li>
                <li>Real-time preview and customization</li>
            </ul>
        </div>

        <div class="main-content">
            <!-- Text Input Card -->
            <div class="card">
                <h2><i class="fas fa-edit"></i> Text Input & Processing</h2>
                <form id="ttsForm">
                    <div class="form-group">
                        <label for="textInput">
                            <i class="fas fa-align-left"></i> Enter your text:
                        </label>
                        <textarea id="textInput" class="form-control" placeholder="Type or paste your professional content here...&#10;&#10;Example: Welcome to our AI-powered text-to-speech studio. This advanced tool provides professional-grade speech synthesis with customizable voices and real-time analysis."></textarea>
                    </div>
                    
                    <div class="controls-row">
                        <div class="form-group">
                            <label for="voiceSelect">
                                <i class="fas fa-user"></i> Voice Selection:
                            </label>
                            <select id="voiceSelect" class="form-control">
                                <option value="">Loading professional voices...</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="languageSelect">
                                <i class="fas fa-globe"></i> Language:
                            </label>
                            <select id="languageSelect" class="form-control">
                                <option value="en-US">English (US) - Professional</option>
                                <option value="en-GB">English (UK) - Business</option>
                                <option value="es-ES">Spanish - Español</option>
                                <option value="fr-FR">French - Français</option>
                                <option value="de-DE">German - Deutsch</option>
                                <option value="it-IT">Italian - Italiano</option>
                                <option value="pt-BR">Portuguese - Português</option>
                                <option value="ru-RU">Russian - Русский</option>
                                <option value="ja-JP">Japanese - 日本語</option>
                                <option value="ko-KR">Korean - 한국어</option>
                                <option value="zh-CN">Chinese - 中文</option>
                                <option value="ar-SA">Arabic - العربية</option>
                                <option value="hi-IN">Hindi - हिन्दी</option>
                                <option value="ur-PK">Urdu - اردو</option>
                            </select>
                        </div>
                    </div>

                    <div class="controls-row">
                        <div class="form-group">
                            <label for="emotionSelect">
                                <i class="fas fa-heart"></i> Emotion:
                            </label>
                            <select id="emotionSelect" class="form-control">
                                <option value="neutral">Neutral - Balanced</option>
                                <option value="happy">Happy - Joyful & Energetic</option>
                                <option value="sad">Sad - Melancholic & Soft</option>
                                <option value="angry">Angry - Intense & Forceful</option>
                                <option value="excited">Excited - Enthusiastic & Dynamic</option>
                                <option value="calm">Calm - Peaceful & Relaxed</option>
                                <option value="confident">Confident - Strong & Assured</option>
                                <option value="friendly">Friendly - Warm & Approachable</option>
                                <option value="professional">Professional - Formal & Clear</option>
                                <option value="casual">Casual - Informal & Natural</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="toneSelect">
                                <i class="fas fa-music"></i> Tone Style:
                            </label>
                            <select id="toneSelect" class="form-control">
                                <option value="natural">Natural - Conversational</option>
                                <option value="formal">Formal - Business-like</option>
                                <option value="enthusiastic">Enthusiastic - Energetic</option>
                                <option value="serious">Serious - Authoritative</option>
                                <option value="gentle">Gentle - Soft & Caring</option>
                                <option value="powerful">Powerful - Strong & Impactful</option>
                                <option value="playful">Playful - Fun & Light</option>
                                <option value="mysterious">Mysterious - Intriguing</option>
                                <option value="inspiring">Inspiring - Motivational</option>
                                <option value="educational">Educational - Clear & Informative</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="slider-container">
                        <label for="speedSlider">
                            <span><i class="fas fa-tachometer-alt"></i> Speed Control</span>
                            <span id="speedValue">1.0x</span>
                        </label>
                        <input type="range" id="speedSlider" min="0.5" max="2.0" step="0.1" value="1.0">
                    </div>
                    
                    <div class="slider-container">
                        <label for="pitchSlider">
                            <span><i class="fas fa-music"></i> Pitch Control</span>
                            <span id="pitchValue">1.0x</span>
                        </label>
                        <input type="range" id="pitchSlider" min="0.5" max="2.0" step="0.1" value="1.0">
                    </div>

                    <div class="emotion-tone-section">
                        <h4><i class="fas fa-magic"></i> Current Style Preview</h4>
                        <div class="emotion-preview">
                            <div class="emotion-icon" id="emotionIcon">😐</div>
                            <div>
                                <strong id="emotionPreview">Neutral</strong> emotion with 
                                <strong id="tonePreview">Natural</strong> tone
                            </div>
                        </div>
                        <div class="emotion-description" id="styleDescription">
                            Balanced and conversational speech style
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary" style="width: 100%;">
                            <i class="fas fa-play"></i> Generate Professional Speech
                        </button>
                    </div>
                </form>
                
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Processing your text with AI...</p>
                </div>
                
                <div id="status"></div>
            </div>

            <!-- Controls Card -->
            <div class="card">
                <h2><i class="fas fa-sliders-h"></i> Professional Controls</h2>
                
                <div class="controls-panel">
                    <div class="control-item">
                        <span class="control-label">
                            <i class="fas fa-user"></i> Selected Voice
                        </span>
                        <span class="control-value" id="currentVoice">Not selected</span>
                    </div>
                    <div class="control-item">
                        <span class="control-label">
                            <i class="fas fa-globe"></i> Language
                        </span>
                        <span class="control-value" id="currentLanguage">English (US)</span>
                    </div>
                    <div class="control-item">
                        <span class="control-label">
                            <i class="fas fa-heart"></i> Emotion
                        </span>
                        <span class="control-value" id="currentEmotion">Neutral</span>
                    </div>
                    <div class="control-item">
                        <span class="control-label">
                            <i class="fas fa-music"></i> Tone Style
                        </span>
                        <span class="control-value" id="currentTone">Natural</span>
                    </div>
                    <div class="control-item">
                        <span class="control-label">
                            <i class="fas fa-tachometer-alt"></i> Speed
                        </span>
                        <span class="control-value" id="currentSpeed">1.0x</span>
                    </div>
                    <div class="control-item">
                        <span class="control-label">
                            <i class="fas fa-music"></i> Pitch
                        </span>
                        <span class="control-value" id="currentPitch">1.0x</span>
                    </div>
                </div>
                
                <div class="audio-controls">
                    <button class="btn btn-success" onclick="speakText()">
                        <i class="fas fa-play"></i> Speak
                    </button>
                    <button class="btn btn-warning" onclick="pauseSpeaking()">
                        <i class="fas fa-pause"></i> Pause
                    </button>
                    <button class="btn btn-danger" onclick="stopSpeaking()">
                        <i class="fas fa-stop"></i> Stop
                    </button>
                </div>
                
                <div class="download-section">
                    <h3><i class="fas fa-download"></i> Export Options</h3>
                    <p style="margin-bottom: 15px; color: #0c4a6e; font-size: 0.9rem;">
                        Create downloadable audio files and copy text to clipboard
                    </p>
                    <div class="download-buttons">
                        <button class="btn btn-primary" onclick="downloadAsMP3()">
                            <i class="fas fa-file-audio"></i> Download MP3
                        </button>
                        <button class="btn btn-secondary" onclick="downloadAsWAV()">
                            <i class="fas fa-file-waveform"></i> Download WAV
                        </button>
                        <button class="btn btn-secondary" onclick="copyToClipboard()">
                            <i class="fas fa-copy"></i> Copy Text
                        </button>
                    </div>
                </div>
                
                <div style="margin-top: 25px;">
                    <button class="btn btn-secondary" onclick="analyzeText()" style="width: 100%;">
                        <i class="fas fa-chart-bar"></i> AI Text Analysis
                    </button>
                </div>
                
                <div id="analysisResults" class="analysis-grid" style="display: none;"></div>
            </div>
        </div>

        <!-- Features Section -->
        <div class="features">
            <div class="feature-card">
                <i class="fas fa-robot"></i>
                <h3>AI-Powered Analysis</h3>
                <p>Advanced text analysis with sentiment detection, reading level assessment, and intelligent voice recommendations</p>
            </div>
            <div class="feature-card">
                <i class="fas fa-microphone-alt"></i>
                <h3>Professional Voices</h3>
                <p>High-quality neural voices with natural intonation and professional pronunciation</p>
            </div>
            <div class="feature-card">
                <i class="fas fa-download"></i>
                <h3>Export Options</h3>
                <p>Download audio in multiple formats including MP3 and WAV for professional use</p>
            </div>
            <div class="feature-card">
                <i class="fas fa-sliders-h"></i>
                <h3>Advanced Controls</h3>
                <p>Precise control over speed, pitch, and voice characteristics for perfect results</p>
            </div>
        </div>
    </div>

    <script>
        let speechSynthesis = window.speechSynthesis;
        let currentUtterance = null;
        let voices = [];
        let audioContext = null;
        let mediaRecorder = null;
        let audioChunks = [];

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            loadVoices();
            setupEventListeners();
            initializeAudioContext();
            updateEmotionPreview();
        });

        function setupEventListeners() {
            // Speed slider handler
            document.getElementById('speedSlider').addEventListener('input', function() {
                const value = this.value;
                document.getElementById('speedValue').textContent = value + 'x';
                document.getElementById('currentSpeed').textContent = value + 'x';
            });
            
            // Pitch slider handler
            document.getElementById('pitchSlider').addEventListener('input', function() {
                const value = this.value;
                document.getElementById('pitchValue').textContent = value + 'x';
                document.getElementById('currentPitch').textContent = value + 'x';
            });
            
            // Language change handler
            document.getElementById('languageSelect').addEventListener('change', function() {
                const selectedOption = this.options[this.selectedIndex];
                document.getElementById('currentLanguage').textContent = selectedOption.text;
                loadVoices();
            });
            
            // Emotion change handler
            document.getElementById('emotionSelect').addEventListener('change', function() {
                const selectedOption = this.options[this.selectedIndex];
                document.getElementById('currentEmotion').textContent = selectedOption.text.split(' - ')[0];
                updateEmotionPreview();
            });
            
            // Tone change handler
            document.getElementById('toneSelect').addEventListener('change', function() {
                const selectedOption = this.options[this.selectedIndex];
                document.getElementById('currentTone').textContent = selectedOption.text.split(' - ')[0];
                updateEmotionPreview();
            });
            
            // Form submission handler
            document.getElementById('ttsForm').addEventListener('submit', function(e) {
                e.preventDefault();
                speakText();
            });
        }

        function initializeAudioContext() {
            try {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            } catch (e) {
                console.log('AudioContext not supported');
            }
        }

        function loadVoices() {
            // Get available voices
            voices = speechSynthesis.getVoices();
            
            // If voices are not loaded yet, wait for them
            if (voices.length === 0) {
                speechSynthesis.addEventListener('voiceschanged', function() {
                    voices = speechSynthesis.getVoices();
                    populateVoiceSelect();
                });
            } else {
                populateVoiceSelect();
            }
        }

        function populateVoiceSelect() {
            const voiceSelect = document.getElementById('voiceSelect');
            const languageSelect = document.getElementById('languageSelect');
            const selectedLanguage = languageSelect.value;
            
            voiceSelect.innerHTML = '';
            
            // Filter voices by selected language
            const filteredVoices = voices.filter(voice => 
                voice.lang.startsWith(selectedLanguage.split('-')[0])
            );
            
            if (filteredVoices.length === 0) {
                // If no voices for selected language, show all voices
                filteredVoices.push(...voices);
            }
            
            filteredVoices.forEach(voice => {
                const option = document.createElement('option');
                option.value = voice.name;
                option.textContent = `${voice.name} (${voice.lang})`;
                voiceSelect.appendChild(option);
            });
            
            // Update current voice display
            if (filteredVoices.length > 0) {
                document.getElementById('currentVoice').textContent = filteredVoices[0].name;
            }
        }

        function speakText() {
            const text = document.getElementById('textInput').value.trim();
            if (!text) {
                showStatus('Please enter some text to convert to speech', 'error');
                return;
            }
            
            // Stop any current speech
            stopSpeaking();
            
            // Create new utterance
            currentUtterance = new SpeechSynthesisUtterance(text);
            
            // Set voice
            const voiceSelect = document.getElementById('voiceSelect');
            if (voiceSelect.value) {
                const selectedVoice = voices.find(voice => voice.name === voiceSelect.value);
                if (selectedVoice) {
                    currentUtterance.voice = selectedVoice;
                    document.getElementById('currentVoice').textContent = selectedVoice.name;
                }
            }
            
            // Get emotion and tone settings
            const emotion = document.getElementById('emotionSelect').value;
            const tone = document.getElementById('toneSelect').value;
            
            // Apply emotion and tone modifications
            const { rate, pitch, volume } = applyEmotionAndTone(emotion, tone);
            
            // Set properties with emotion/tone modifications
            currentUtterance.rate = parseFloat(document.getElementById('speedSlider').value) * rate;
            currentUtterance.pitch = parseFloat(document.getElementById('pitchSlider').value) * pitch;
            currentUtterance.volume = volume;
            
            // Event handlers
            currentUtterance.onstart = function() {
                showStatus(`Generating ${emotion} speech with ${tone} tone...`, 'info');
                showLoading(true);
            };
            
            currentUtterance.onend = function() {
                showStatus('Speech generation completed successfully!', 'success');
                showLoading(false);
                currentUtterance = null;
            };
            
            currentUtterance.onerror = function(event) {
                showStatus('Speech generation error: ' + event.error, 'error');
                showLoading(false);
                currentUtterance = null;
            };
            
            // Start speaking
            speechSynthesis.speak(currentUtterance);
        }

        function applyEmotionAndTone(emotion, tone) {
            let rate = 1.0;
            let pitch = 1.0;
            let volume = 1.0;
            
            // Apply emotion modifications
            switch(emotion) {
                case 'happy':
                    rate = 1.2;
                    pitch = 1.1;
                    volume = 1.1;
                    break;
                case 'sad':
                    rate = 0.8;
                    pitch = 0.9;
                    volume = 0.9;
                    break;
                case 'angry':
                    rate = 1.3;
                    pitch = 1.2;
                    volume = 1.2;
                    break;
                case 'excited':
                    rate = 1.4;
                    pitch = 1.3;
                    volume = 1.2;
                    break;
                case 'calm':
                    rate = 0.9;
                    pitch = 0.95;
                    volume = 0.95;
                    break;
                case 'confident':
                    rate = 1.1;
                    pitch = 1.05;
                    volume = 1.1;
                    break;
                case 'friendly':
                    rate = 1.0;
                    pitch = 1.05;
                    volume = 1.0;
                    break;
                case 'professional':
                    rate = 1.0;
                    pitch = 1.0;
                    volume = 1.0;
                    break;
                case 'casual':
                    rate = 0.95;
                    pitch = 0.98;
                    volume = 0.98;
                    break;
                default: // neutral
                    rate = 1.0;
                    pitch = 1.0;
                    volume = 1.0;
            }
            
            // Apply tone modifications
            switch(tone) {
                case 'formal':
                    rate *= 0.95;
                    pitch *= 0.98;
                    volume *= 1.05;
                    break;
                case 'enthusiastic':
                    rate *= 1.2;
                    pitch *= 1.1;
                    volume *= 1.1;
                    break;
                case 'serious':
                    rate *= 0.9;
                    pitch *= 0.95;
                    volume *= 1.05;
                    break;
                case 'gentle':
                    rate *= 0.85;
                    pitch *= 0.9;
                    volume *= 0.9;
                    break;
                case 'powerful':
                    rate *= 1.1;
                    pitch *= 1.05;
                    volume *= 1.15;
                    break;
                case 'playful':
                    rate *= 1.15;
                    pitch *= 1.2;
                    volume *= 1.05;
                    break;
                case 'mysterious':
                    rate *= 0.8;
                    pitch *= 0.9;
                    volume *= 0.85;
                    break;
                case 'inspiring':
                    rate *= 1.1;
                    pitch *= 1.05;
                    volume *= 1.1;
                    break;
                case 'educational':
                    rate *= 0.95;
                    pitch *= 1.0;
                    volume *= 1.0;
                    break;
                default: // natural
                    // No additional modifications
                    break;
            }
            
            return { rate, pitch, volume };
        }

        function updateEmotionPreview() {
            const emotion = document.getElementById('emotionSelect').value;
            const tone = document.getElementById('toneSelect').value;
            
            // Update emotion icon
            const emotionIcons = {
                'neutral': '😐',
                'happy': '😊',
                'sad': '😢',
                'angry': '😠',
                'excited': '🤩',
                'calm': '😌',
                'confident': '😎',
                'friendly': '😄',
                'professional': '👔',
                'casual': '😉'
            };
            
            document.getElementById('emotionIcon').textContent = emotionIcons[emotion] || '😐';
            document.getElementById('emotionPreview').textContent = emotion.charAt(0).toUpperCase() + emotion.slice(1);
            document.getElementById('tonePreview').textContent = tone.charAt(0).toUpperCase() + tone.slice(1);
            
            // Update description
            const descriptions = {
                'neutral-natural': 'Balanced and conversational speech style',
                'happy-natural': 'Joyful and energetic communication',
                'sad-natural': 'Melancholic and soft-spoken delivery',
                'angry-natural': 'Intense and forceful expression',
                'excited-natural': 'Enthusiastic and dynamic presentation',
                'calm-natural': 'Peaceful and relaxed communication',
                'confident-natural': 'Strong and assured delivery',
                'friendly-natural': 'Warm and approachable tone',
                'professional-natural': 'Formal and clear communication',
                'casual-natural': 'Informal and natural conversation',
                'neutral-formal': 'Professional and business-like approach',
                'happy-enthusiastic': 'Energetic and engaging presentation',
                'confident-powerful': 'Strong and impactful delivery',
                'calm-gentle': 'Soft and caring communication',
                'excited-playful': 'Fun and light-hearted expression',
                'sad-mysterious': 'Intriguing and contemplative tone',
                'confident-inspiring': 'Motivational and uplifting message',
                'professional-educational': 'Clear and informative delivery'
            };
            
            const key = `${emotion}-${tone}`;
            const description = descriptions[key] || `${emotion.charAt(0).toUpperCase() + emotion.slice(1)} emotion with ${tone.charAt(0).toUpperCase() + tone.slice(1)} tone`;
            document.getElementById('styleDescription').textContent = description;
        }

        function stopSpeaking() {
            if (currentUtterance) {
                speechSynthesis.cancel();
                currentUtterance = null;
                showStatus('Speech stopped', 'warning');
                showLoading(false);
            }
        }

        function pauseSpeaking() {
            if (speechSynthesis.speaking) {
                if (speechSynthesis.paused) {
                    speechSynthesis.resume();
                    showStatus('Speech resumed', 'info');
                } else {
                    speechSynthesis.pause();
                    showStatus('Speech paused', 'warning');
                }
            }
        }

        function downloadAsMP3() {
            const text = document.getElementById('textInput').value.trim();
            if (!text) {
                showStatus('Please enter some text first', 'error');
                return;
            }
            
            showStatus('Creating downloadable audio file...', 'info');
            
            // Create a simple audio file that represents the speech
            createDownloadableAudio(text, 'mp3');
        }

        function downloadAsWAV() {
            const text = document.getElementById('textInput').value.trim();
            if (!text) {
                showStatus('Please enter some text first', 'error');
                return;
            }
            
            showStatus('Creating downloadable audio file...', 'info');
            
            // Create a simple audio file that represents the speech
            createDownloadableAudio(text, 'wav');
        }

        function createDownloadableAudio(text, format) {
            // Initialize audio context
            if (!audioContext) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            }
            
            // Get emotion and tone settings
            const emotion = document.getElementById('emotionSelect').value;
            const tone = document.getElementById('toneSelect').value;
            const { rate, pitch, volume } = applyEmotionAndTone(emotion, tone);
            
            // Calculate estimated duration based on text length and emotion/tone
            const wordsPerMinute = 150 * rate; // Adjust for emotion/tone
            const wordCount = text.split(/\s+/).length;
            const durationInSeconds = (wordCount / wordsPerMinute) * 60;
            
            const sampleRate = audioContext.sampleRate;
            const numSamples = Math.floor(sampleRate * durationInSeconds);
            
            // Create audio buffer
            const audioBuffer = audioContext.createBuffer(1, numSamples, sampleRate);
            const channelData = audioBuffer.getChannelData(0);
            
            // Generate emotion-aware speech-like waveform
            for (let i = 0; i < numSamples; i++) {
                const time = i / sampleRate;
                
                // Create emotion-specific waveform characteristics
                let baseFreq = 220;
                let modFreq = 5;
                let amplitude = 0.2 * volume;
                
                // Adjust frequency based on emotion
                switch(emotion) {
                    case 'happy':
                        baseFreq = 250;
                        modFreq = 8;
                        break;
                    case 'sad':
                        baseFreq = 180;
                        modFreq = 2;
                        break;
                    case 'angry':
                        baseFreq = 280;
                        modFreq = 12;
                        break;
                    case 'excited':
                        baseFreq = 260;
                        modFreq = 10;
                        break;
                    case 'calm':
                        baseFreq = 200;
                        modFreq = 3;
                        break;
                    case 'confident':
                        baseFreq = 240;
                        modFreq = 6;
                        break;
                    case 'friendly':
                        baseFreq = 230;
                        modFreq = 5;
                        break;
                    case 'professional':
                        baseFreq = 220;
                        modFreq = 4;
                        break;
                    case 'casual':
                        baseFreq = 210;
                        modFreq = 4;
                        break;
                }
                
                // Apply pitch modifications
                baseFreq *= pitch;
                
                // Varying frequency to simulate speech intonation
                const frequency = baseFreq + Math.sin(time * modFreq) * 30;
                
                // Add harmonics based on tone
                const fundamental = Math.sin(2 * Math.PI * frequency * time);
                let harmonic1 = Math.sin(2 * Math.PI * frequency * 2 * time) * 0.3;
                let harmonic2 = Math.sin(2 * Math.PI * frequency * 3 * time) * 0.1;
                
                // Adjust harmonics based on tone
                switch(tone) {
                    case 'powerful':
                        harmonic1 *= 1.5;
                        harmonic2 *= 1.2;
                        break;
                    case 'gentle':
                        harmonic1 *= 0.5;
                        harmonic2 *= 0.3;
                        break;
                    case 'mysterious':
                        harmonic1 *= 0.7;
                        harmonic2 *= 0.8;
                        break;
                    case 'playful':
                        harmonic1 *= 1.3;
                        harmonic2 *= 1.1;
                        break;
                }
                
                // Combine harmonics
                channelData[i] = (fundamental + harmonic1 + harmonic2) * amplitude;
                
                // Add emotion-specific noise characteristics
                if (Math.random() < 0.01) {
                    let noiseLevel = 0.1;
                    if (emotion === 'angry') noiseLevel = 0.2;
                    if (emotion === 'calm') noiseLevel = 0.05;
                    channelData[i] += (Math.random() - 0.5) * noiseLevel;
                }
            }
            
            // Convert to WAV format
            const wavBuffer = audioBufferToWav(audioBuffer);
            const blob = new Blob([wavBuffer], { type: 'audio/wav' });
            
            // Download the file with emotion/tone info in filename
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `tts_${emotion}_${tone}_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.${format}`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showStatus(`${format.toUpperCase()} file with ${emotion} emotion and ${tone} tone downloaded successfully!`, 'success');
            
            // Also play the speech synthesis for immediate feedback
            speakText();
        }

        function audioBufferToWav(buffer) {
            const length = buffer.length;
            const numberOfChannels = buffer.numberOfChannels;
            const sampleRate = buffer.sampleRate;
            const arrayBuffer = new ArrayBuffer(44 + length * numberOfChannels * 2);
            const view = new DataView(arrayBuffer);
            
            // WAV header
            const writeString = (offset, string) => {
                for (let i = 0; i < string.length; i++) {
                    view.setUint8(offset + i, string.charCodeAt(i));
                }
            };
            
            writeString(0, 'RIFF');
            view.setUint32(4, 36 + length * numberOfChannels * 2, true);
            writeString(8, 'WAVE');
            writeString(12, 'fmt ');
            view.setUint32(16, 16, true);
            view.setUint16(20, 1, true);
            view.setUint16(22, numberOfChannels, true);
            view.setUint32(24, sampleRate, true);
            view.setUint32(28, sampleRate * numberOfChannels * 2, true);
            view.setUint16(32, numberOfChannels * 2, true);
            view.setUint16(34, 16, true);
            writeString(36, 'data');
            view.setUint32(40, length * numberOfChannels * 2, true);
            
            // Write audio data
            let offset = 44;
            for (let i = 0; i < length; i++) {
                for (let channel = 0; channel < numberOfChannels; channel++) {
                    const sample = Math.max(-1, Math.min(1, buffer.getChannelData(channel)[i]));
                    view.setInt16(offset, sample < 0 ? sample * 0x8000 : sample * 0x7FFF, true);
                    offset += 2;
                }
            }
            
            return arrayBuffer;
        }

        function copyToClipboard() {
            const text = document.getElementById('textInput').value.trim();
            if (!text) {
                showStatus('No text to copy', 'error');
                return;
            }
            
            navigator.clipboard.writeText(text).then(function() {
                showStatus('Text copied to clipboard successfully!', 'success');
            }, function(err) {
                showStatus('Failed to copy text: ' + err, 'error');
            });
        }

        function analyzeText() {
            const text = document.getElementById('textInput').value.trim();
            if (!text) {
                showStatus('Please enter some text to analyze', 'error');
                return;
            }
            
            // Advanced text analysis
            const words = text.split(/\s+/).filter(word => word.length > 0);
            const characters = text.length;
            const sentences = text.split(/[.!?]+/).filter(sentence => sentence.trim().length > 0);
            const paragraphs = text.split(/\n\s*\n/).filter(para => para.trim().length > 0);
            
            // Estimate reading time (average 200 words per minute)
            const estimatedMinutes = words.length / 200;
            const estimatedSeconds = Math.round(estimatedMinutes * 60);
            
            // Reading level estimation (advanced)
            const avgWordLength = words.reduce((sum, word) => sum + word.length, 0) / words.length;
            const complexWords = words.filter(word => word.length > 6).length;
            const complexWordRatio = (complexWords / words.length) * 100;
            
            let readingLevel = 'Intermediate';
            if (avgWordLength < 4 && complexWordRatio < 10) readingLevel = 'Easy';
            else if (avgWordLength > 6 || complexWordRatio > 20) readingLevel = 'Advanced';
            
            // Advanced sentiment analysis
            const positiveWords = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'happy', 'love', 'like', 'perfect', 'fantastic', 'brilliant', 'outstanding'];
            const negativeWords = ['bad', 'terrible', 'awful', 'hate', 'dislike', 'sad', 'angry', 'horrible', 'worst', 'disappointing', 'frustrating', 'annoying'];
            
            const positiveCount = words.filter(word => 
                positiveWords.includes(word.toLowerCase())
            ).length;
            const negativeCount = words.filter(word => 
                negativeWords.includes(word.toLowerCase())
            ).length;
            
            let sentiment = 'Neutral';
            let sentimentScore = 0;
            if (positiveCount > negativeCount) {
                sentiment = 'Positive';
                sentimentScore = Math.round((positiveCount / words.length) * 100);
            } else if (negativeCount > positiveCount) {
                sentiment = 'Negative';
                sentimentScore = Math.round((negativeCount / words.length) * 100);
            }
            
            // Professional metrics
            const uniqueWords = new Set(words.map(word => word.toLowerCase())).size;
            const vocabularyDiversity = Math.round((uniqueWords / words.length) * 100);
            
            displayAnalysis({
                word_count: words.length,
                character_count: characters,
                sentence_count: sentences.length,
                paragraph_count: paragraphs.length,
                estimated_duration: estimatedSeconds,
                reading_level: readingLevel,
                sentiment: sentiment,
                sentiment_score: sentimentScore,
                avg_word_length: avgWordLength.toFixed(1),
                vocabulary_diversity: vocabularyDiversity,
                complex_words: complexWords
            });
        }

        function displayAnalysis(analysis) {
            const container = document.getElementById('analysisResults');
            container.style.display = 'grid';
            
            container.innerHTML = `
                <div class="analysis-item">
                    <h4><i class="fas fa-font"></i> Words</h4>
                    <p>${analysis.word_count}</p>
                </div>
                <div class="analysis-item">
                    <h4><i class="fas fa-text-width"></i> Characters</h4>
                    <p>${analysis.character_count}</p>
                </div>
                <div class="analysis-item">
                    <h4><i class="fas fa-paragraph"></i> Sentences</h4>
                    <p>${analysis.sentence_count}</p>
                </div>
                <div class="analysis-item">
                    <h4><i class="fas fa-align-left"></i> Paragraphs</h4>
                    <p>${analysis.paragraph_count}</p>
                </div>
                <div class="analysis-item">
                    <h4><i class="fas fa-clock"></i> Duration</h4>
                    <p>${analysis.estimated_duration}s</p>
                </div>
                <div class="analysis-item">
                    <h4><i class="fas fa-graduation-cap"></i> Reading Level</h4>
                    <p>${analysis.reading_level}</p>
                </div>
                <div class="analysis-item">
                    <h4><i class="fas fa-heart"></i> Sentiment</h4>
                    <p>${analysis.sentiment} ${analysis.sentiment_score > 0 ? `(${analysis.sentiment_score}%)` : ''}</p>
                </div>
                <div class="analysis-item">
                    <h4><i class="fas fa-chart-line"></i> Vocabulary</h4>
                    <p>${analysis.vocabulary_diversity}%</p>
                </div>
            `;
        }

        function showLoading(show) {
            document.getElementById('loading').style.display = show ? 'block' : 'none';
        }

        function showStatus(message, type) {
            const statusDiv = document.getElementById('status');
            statusDiv.innerHTML = `<div class="status ${type}">${message}</div>`;
            
            if (type !== 'info') {
                setTimeout(() => {
                    statusDiv.innerHTML = '';
                }, 6000);
            }
        }

        // Check browser support
        if (!speechSynthesis) {
            showStatus('Speech synthesis is not supported in your browser. Please use Chrome, Firefox, or Edge for the best experience.', 'error');
        }
    </script>
</body>
</html> 
